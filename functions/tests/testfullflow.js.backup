/**
 * Test file for complete task processing flow
 * 
 * This test file runs the complete flow:
 * 1. Fetch transcript from Microsoft Teams
 * 2. Process with OpenAI to extract tasks
 * 3. Store in MongoDB
 * 
 * Usage: node tests/testFullFlow.js
 */

require("dotenv").config();

const { getMeetingTranscript } = require("../services/getTranscript");
const { processTranscriptToTasks } = require("../services/taskProcessor");
const { testOpenAIConnection } = require("../services/openaiService");
const { testMongoConnection, getCollectionStats, initializeTicketCounter, getCurrentTicketCount } = require("../services/mongoService");
const { testJiraConnection, getProjectInfo } = require("../services/jiraService");
const { getMeetingUrlWithFallback, shouldHaveMeetingOnDay, testMeetingUrlService } = require("../services/meetingUrlService");

async function testCompleteFlow() {
  console.log("=".repeat(80));
  console.log("TESTING COMPLETE TASK PROCESSING FLOW");
  console.log("=".repeat(80));
  
  // Check environment variables
  console.log("\n1. Checking environment variables...");
  const requiredEnvVars = [
    "AZURE_CLIENT_ID",
    "AZURE_CLIENT_SECRET", 
    "AZURE_AUTHORITY",
    "OPENAI_API_KEY",
    "MONGODB_URI",
    "JIRA_URL",
    "JIRA_EMAIL",
    "JIRA_API_TOKEN",
    "JIRA_PROJECT_KEY"
  ];
  
  // Meeting URL environment variables (at least one set should be available)
  const meetingUrlVars = [
    "DAILY_STANDUP_URL_MWF",
    "DAILY_STANDUP_URL_TT",
    "DAILY_STANDUP_URL" // Legacy fallback
  ];
  
  const missingVars = [];
  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      missingVars.push(envVar);
    } else {
      const displayValue = envVar.includes("SECRET") || envVar.includes("KEY") || envVar.includes("TOKEN") ? "[HIDDEN]" : 
        process.env[envVar].length > 30 ? 
          process.env[envVar].substring(0, 30) + "..." :
          process.env[envVar];
      console.log(`‚úì ${envVar}: ${displayValue}`);
    }
  }
  
  // Check meeting URL variables
  console.log("\nüìÖ Meeting URL Configuration:");
  const availableMeetingUrls = [];
  for (const envVar of meetingUrlVars) {
    if (process.env[envVar]) {
      availableMeetingUrls.push(envVar);
      const displayValue = process.env[envVar].substring(0, 50) + "...";
      console.log(`‚úì ${envVar}: ${displayValue}`);
    } else {
      console.log(`‚ö†Ô∏è  ${envVar}: Not set`);
    }
  }
  
  if (availableMeetingUrls.length === 0) {
    console.error("\n‚ùå No meeting URL environment variables found!");
    console.error("Set at least one of: DAILY_STANDUP_URL_MWF, DAILY_STANDUP_URL_TT, or DAILY_STANDUP_URL");
    missingVars.push("MEETING_URL_CONFIGURATION");
  }
  
  if (missingVars.length > 0) {
    console.error("\n‚ùå Missing environment variables:");
    missingVars.forEach(envVar => console.error(`   - ${envVar}`));
    console.error("\nPlease check your .env file in the functions directory.");
    process.exit(1);
  }
  
  console.log("\n‚úì All required environment variables found");
  
  // Test meeting URL service
  console.log("\nüìÖ Testing meeting URL service...");
  try {
    const meetingUrlTest = await testMeetingUrlService();
    console.log("   üìä Environment check:", meetingUrlTest.environmentCheck.success ? "‚úì" : "‚ùå");
    
    if (!meetingUrlTest.environmentCheck.success) {
      console.log("   Missing:", meetingUrlTest.environmentCheck.missingVars.join(", "));
    }
    
    console.log("   üìÖ Weekly schedule:");
    meetingUrlTest.dayTests.forEach(test => {
      const status = test.shouldHaveMeeting ? 
        (test.meetingUrl === "URL_SET" ? "‚úì" : "‚ùå") : 
        "‚ö´";
      console.log(`      ${test.dayName}: ${status} ${test.meetingType || "No meeting"}`);
    });
  } catch (error) {
    console.error("   ‚ùå Meeting URL service test failed:", error.message);
  }
  
  // Test service connections
  console.log("\n2. Testing service connections...");
  
  console.log("   ü§ñ Testing OpenAI connection...");
  const openaiTest = await testOpenAIConnection();
  if (!openaiTest) {
    console.error("   ‚ùå OpenAI connection test failed");
    process.exit(1);
  }
  console.log("   ‚úì OpenAI connection successful");
  
  console.log("   üçÉ Testing MongoDB connection...");
  const mongoTest = await testMongoConnection();
  if (!mongoTest) {
    console.error("   ‚ùå MongoDB connection test failed");
    process.exit(1);
  }
  console.log("   ‚úì MongoDB connection successful");
  
  console.log("   üé´ Testing Jira connection...");
  const jiraTest = await testJiraConnection();
  if (!jiraTest) {
    console.error("   ‚ùå Jira connection test failed");
    process.exit(1);
  }
  console.log("   ‚úì Jira connection successful");
  
  console.log("   üîç Testing Jira project access...");
  const projectInfo = await getProjectInfo(process.env.JIRA_PROJECT_KEY);
  if (!projectInfo) {
    console.error(`   ‚ùå Cannot access Jira project: ${process.env.JIRA_PROJECT_KEY}`);
    process.exit(1);
  }
  console.log(`   ‚úì Jira project access confirmed: ${projectInfo.name} (${projectInfo.key})`);
  
  // Get MongoDB collection stats and initialize ticket counter
  try {
    const stats = await getCollectionStats();
    console.log(`   üìä MongoDB collection has ${stats.documentCount} existing documents`);
    
    // Initialize ticket counter if needed
    console.log("   üé´ Initializing ticket counter...");
    await initializeTicketCounter();
    const currentCount = await getCurrentTicketCount();
    console.log(`   üé´ Current ticket counter: ${currentCount} (next ID: SP-${currentCount + 1})`);
  } catch (error) {
    console.log("   üìä MongoDB collection stats unavailable (collection may not exist yet)");
    console.log("   üé´ Ticket counter initialization may be needed");
  }
  
  // Step 1: Fetch transcript
  console.log("\n3. Fetching transcript from Microsoft Teams...");
  
  // Determine which meeting URL to use
  const meetingUrl = getMeetingUrlWithFallback();
  const currentDay = new Date().toLocaleDateString("en-US", { weekday: "long", timeZone: "Asia/Dhaka" });
  
  let transcriptResult;
  
  if (!meetingUrl) {
    console.log(`   ‚ö†Ô∏è  No meeting URL available for ${currentDay}`);
    console.log("   This could be because:");
    console.log("      - It's a weekend (Saturday/Sunday)");
    console.log("      - Meeting URL environment variables are not properly configured");
    console.log("      - Today is not a scheduled meeting day");
    console.log("\n   Skipping transcript fetch test.");
    
    // Continue with the rest of the test using a mock/empty transcript
    console.log("\n   üìù Using empty transcript for testing task processing...");
    transcriptResult = {
      transcript: [],
      metadata: {
        entryCount: 0,
        meetingId: "test-meeting-id",
        savedToFile: "test-transcript.json"
      }
    };
  } else {
    console.log(`   üìÖ Meeting URL for ${currentDay}: ${meetingUrl.substring(0, 60)}...`);
    
    try {
      console.log("   üîÑ Starting transcript fetch...");
      const startTime = Date.now();
      
      transcriptResult = await getMeetingTranscript(meetingUrl);
      
      const duration = ((Date.now() - startTime) / 1000).toFixed(2);
    
      if (transcriptResult) {
        console.log("   ‚úÖ Transcript fetched successfully");
        console.log(`   ‚è±Ô∏è  Duration: ${duration} seconds`);
        console.log(`   üìä Entries: ${transcriptResult.metadata.entryCount}`);
        console.log(`   üÜî Meeting ID: ${transcriptResult.metadata.meetingId}`);
        console.log(`   üíæ Saved to: ${transcriptResult.metadata.savedToFile}`);
      
        // Show sample entries
        if (transcriptResult.transcript.length > 0) {
          console.log("\n   üìù Sample entries (first 3):");
          transcriptResult.transcript.slice(0, 3).forEach((entry, index) => {
            const speaker = entry.speaker?.replace(/<[^>]*>/g, "").trim() || "Unknown";
            const text = entry.text?.replace(/<[^>]*>/g, "").substring(0, 80) || "";
            console.log(`      ${index + 1}. ${speaker}: ${text}${text.length >= 80 ? "..." : ""}`);
          });
        }
      
      } else {
        console.log("   ‚ö†Ô∏è  No transcript found for this meeting");
        console.log("   This could mean:");
        console.log("      - The meeting hasn't occurred yet");
        console.log("      - No transcript was generated"); 
        console.log("      - Transcription is still processing");
        console.log("\n   üìù Using empty transcript for testing task processing...");
        transcriptResult = {
          transcript: [],
          metadata: {
            entryCount: 0,
            meetingId: "no-meeting-found",
            savedToFile: "empty-transcript.json"
          }
        };
      }
      
    } catch (error) {
      console.log("\n   ‚ùå ERROR occurred during transcript fetch:");
      console.error(`      Message: ${error.message}`);
      
      if (error.response) {
        console.error(`      HTTP Status: ${error.response.status}`);
      }
      
      console.log("\n   üìù Using empty transcript for testing task processing...");
      transcriptResult = {
        transcript: [],
        metadata: {
          entryCount: 0,
          meetingId: "error-occurred",
          savedToFile: "error-transcript.json"
        }
      };
    }
  }
  
  // Step 2: Process transcript with complete flow (OpenAI + MongoDB + Jira)
  console.log("\n4. Processing transcript with complete flow...");
  console.log("   üîÑ Starting OpenAI processing, MongoDB storage, and Jira issue creation...");
  
  try {
    const startTime = Date.now();
    
    const taskResult = await processTranscriptToTasks(
      transcriptResult.transcript, 
      transcriptResult.metadata
    );
    
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);
    
    if (taskResult.success) {
      console.log("   ‚úÖ Complete flow successful!");
      console.log(`   ‚è±Ô∏è  Total duration: ${duration} seconds`);
      
      // Show transcript storage details
      console.log("\n   üìÑ Transcript Storage:");
      console.log(`      - Document ID: ${taskResult.transcriptStorage.documentId}`);
      console.log(`      - Date: ${taskResult.transcriptStorage.date}`);
      console.log(`      - Entry count: ${taskResult.transcriptStorage.entryCount}`);
      console.log(`      - Data size: ${taskResult.transcriptStorage.dataSize} characters`);
      
      // Show OpenAI processing details
      console.log("\n   ü§ñ OpenAI Processing:");
      console.log(`      - Model: ${taskResult.processing.metadata.model}`);
      console.log(`      - Tokens used: ${taskResult.processing.metadata.tokensUsed}`);
      
      // Show MongoDB task storage details
      console.log("\n   üçÉ MongoDB Task Storage:");
      console.log(`      - Document ID: ${taskResult.storage.documentId}`);
      console.log(`      - Timestamp: ${taskResult.storage.timestamp}`);
      
      // Show Jira integration details
      console.log("\n   üé´ Jira Integration:");
      if (taskResult.jira) {
        console.log(`      - Success: ${taskResult.jira.success}`);
        console.log(`      - Coding tasks: ${taskResult.jira.totalCodingTasks}`);
        console.log(`      - Issues created: ${taskResult.jira.createdIssues?.length || 0}`);
        console.log(`      - Issues failed: ${taskResult.jira.failedIssues?.length || 0}`);
        console.log(`      - Processing time: ${taskResult.processing.metadata.jiraProcessingTime}`);
        
        if (taskResult.jira.createdIssues && taskResult.jira.createdIssues.length > 0) {
          console.log("\n      üìã Created Jira Issues:");
          taskResult.jira.createdIssues.forEach((issue, index) => {
            console.log(`         ${index + 1}. ${issue.issueKey}: "${issue.title}"`);
            console.log(`            - Participant: ${issue.participant}`);
            console.log(`            - URL: ${issue.issueUrl}`);
          });
        }
        
        if (taskResult.jira.failedIssues && taskResult.jira.failedIssues.length > 0) {
          console.log("\n      ‚ùå Failed Jira Issues:");
          taskResult.jira.failedIssues.forEach((issue, index) => {
            console.log(`         ${index + 1}. Error: ${issue.error}`);
            console.log(`            - Participant: ${issue.participant}`);
          });
        }
      } else {
        console.log("      - Status: Not executed (may have been skipped due to errors)");
      }
      
      // Show task summary
      console.log("\n   üìã Task Summary:");
      console.log(`      - Participants: ${taskResult.summary.participantCount}`);
      console.log(`      - Total tasks: ${taskResult.summary.totalTasks}`);
      
      // Display extracted tasks
      console.log("\n5. EXTRACTED AND STORED TASKS:");
      console.log("=".repeat(60));
      
      const tasks = taskResult.tasks;
      
      for (const [participant, participantTasks] of Object.entries(tasks)) {
        console.log(`\nüë§ ${participant}'s Tasks:`);
        
        if (participantTasks.Coding && participantTasks.Coding.length > 0) {
          console.log("   üíª Coding Tasks:");
          participantTasks.Coding.forEach((task, index) => {
            const taskTitle = typeof task === "object" && task.title ? task.title : "Untitled";
            const taskText = typeof task === "string" ? task : task.description;
            const taskStatus = typeof task === "object" ? task.status : "To-do";
            const ticketId = typeof task === "object" && task.ticketId ? task.ticketId : "N/A";
            const estimatedTime = typeof task === "object" && task.estimatedTime ? `${task.estimatedTime}h` : "0h";
            const timeTaken = typeof task === "object" && task.timeTaken ? `${task.timeTaken}h` : "0h";
            console.log(`      ${index + 1}. [${ticketId}] "${taskTitle}" - ${taskText} (${taskStatus}) [Est: ${estimatedTime}, Spent: ${timeTaken}]`);
          });
        }
        
        if (participantTasks["Non-Coding"] && participantTasks["Non-Coding"].length > 0) {
          console.log("   üìù Non-Coding Tasks:");
          participantTasks["Non-Coding"].forEach((task, index) => {
            const taskTitle = typeof task === "object" && task.title ? task.title : "Untitled";
            const taskText = typeof task === "string" ? task : task.description;
            const taskStatus = typeof task === "object" ? task.status : "To-do";
            const ticketId = typeof task === "object" && task.ticketId ? task.ticketId : "N/A";
            const estimatedTime = typeof task === "object" && task.estimatedTime ? `${task.estimatedTime}h` : "0h";
            const timeTaken = typeof task === "object" && task.timeTaken ? `${task.timeTaken}h` : "0h";
            console.log(`      ${index + 1}. [${ticketId}] "${taskTitle}" - ${taskText} (${taskStatus}) [Est: ${estimatedTime}, Spent: ${timeTaken}]`);
          });
        }
        
        if ((!participantTasks.Coding || participantTasks.Coding.length === 0) && 
            (!participantTasks["Non-Coding"] || participantTasks["Non-Coding"].length === 0)) {
          console.log("   (No tasks identified)");
        }
      }
      
      // Show final statistics
      console.log("\nüìà FINAL STATISTICS:");
      console.log(`   - Transcript entries processed: ${transcriptResult.metadata.entryCount}`);
      console.log(`   - Participants identified: ${taskResult.summary.participantCount}`);
      console.log(`   - Total tasks extracted: ${taskResult.summary.totalTasks}`);
      console.log(`   - Coding tasks identified: ${taskResult.summary.totalCodingTasks}`);
      console.log(`   - Tasks with ticket IDs assigned: ${taskResult.storage.totalTasksWithIds || 0}`);
      console.log(`   - Jira issues created: ${taskResult.summary.jiraIssuesCreated}`);
      console.log(`   - Jira issues failed: ${taskResult.summary.jiraIssuesFailed}`);
      console.log(`   - OpenAI tokens used: ${taskResult.processing.metadata.tokensUsed}`);
      console.log(`   - Total processing time: ${taskResult.processing.metadata.totalProcessingTime}`);
      console.log(`   - Jira processing time: ${taskResult.processing.metadata.jiraProcessingTime}`);
      console.log(`   - MongoDB task document ID: ${taskResult.storage.documentId}`);
      console.log(`   - MongoDB transcript document ID: ${taskResult.transcriptStorage.documentId}`);
      console.log(`   - Transcript date: ${taskResult.transcriptStorage.date}`);
      console.log(`   - Jira integration success: ${taskResult.processing.steps.jiraIssueCreation}`);
      
      // Show assigned ticket IDs
      if (taskResult.storage.assignedTicketIds && taskResult.storage.assignedTicketIds.length > 0) {
        console.log(`   - Assigned ticket IDs: ${taskResult.storage.assignedTicketIds.join(", ")}`);
      }
      
      // Show updated collection stats
      try {
        const finalStats = await getCollectionStats();
        console.log(`   - MongoDB documents (after): ${finalStats.documentCount}`);
      } catch (error) {
        console.log("   - MongoDB final stats unavailable");
      }
      
    } else {
      console.error("   ‚ùå Task processing failed");
      process.exit(1);
    }
    
  } catch (error) {
    console.log("\n   ‚ùå ERROR occurred during task processing:");
    console.error(`      Message: ${error.message}`);
    
    if (error.stack) {
      console.error(`      Stack: ${error.stack.substring(0, 200)}...`);
    }
    
    console.log("\nTroubleshooting tips:");
    console.log("   1. Check OpenAI API key and credits");
    console.log("   2. Verify MongoDB connection and permissions");
    console.log("   3. Check Jira connection and project permissions");
    console.log("   4. Check if transcript format is valid");
    console.log("   5. Review service logs for detailed error information");
    
    process.exit(1);
  }
  
  console.log("\n" + "=".repeat(80));
  console.log("COMPLETE FLOW TEST COMPLETED SUCCESSFULLY! üéâ");
  console.log("=".repeat(80));
  console.log("\nNext steps:");
  console.log("- Check MongoDB to verify data was stored correctly");
  console.log("- Check Jira project for created issues");
  console.log("- Review the transcript file in the output directory");
  console.log("- Test the Firebase Functions deployment");
  console.log("- Run individual Jira tests: node tests/testJiraIntegration.js");
}

// Handle unhandled promise rejections
process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);
  process.exit(1);
});

// Handle uncaught exceptions
process.on("uncaughtException", (error) => {
  console.error("Uncaught Exception:", error);
  process.exit(1);
});

// Run the test
if (require.main === module) {
  console.log("Starting complete flow test...\n");
  testCompleteFlow().catch(error => {
    console.error("Test failed:", error);
    process.exit(1);
  });
}

module.exports = {
  testCompleteFlow
};
